# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, setup-actions ]
  pull_request:
    branches: [ master, setup-actions ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job sets up the prerequisites and makes sure that data files are present
  # prereq:
  #   runs-on: self-hosted
  #   env:
  #     ESTDIR: ~/speech_tools
  #     FESTVOXDIR: ~/festvox
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v2
  #     - name: Cache conda
  #       uses: actions/cache@v2
  #       id: cache-conda
  #       with:
  #         path: |
  #           ~/miniconda
  #         key: ${{ runner.os }}-conda
  #     - name: Cache downloaded speech tools
  #       uses: actions/cache@v2
  #       id: cache-downloaded
  #       with:
  #         path: |
  #           ~/festival
  #           ~/festvox
  #           ~/speech_tools
  #         key: ${{ runner.os }}-speech_stuff
  #     - name: Cache EST
  #       id: cache-est
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           ~/.est_build.done
  #         key: ${{ runner.os }}-est
  #     - name: Cache Festival
  #       id: cache-festival
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           ~/.festival_build.done
  #         key: ${{ runner.os }}-festival
  #     - name: Cache Festvox
  #       id: cache-festvox
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           ~/.festvox_build.done
  #         key: ${{ runner.os }}-festvox
  #     - name: Get conda
  #       if: steps.cache-conda.outputs.cache-hit != 'true'
  #       run: |
  #         cd
  #         wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
  #         bash ~/miniconda.sh -b -p $HOME/miniconda
  #         source $HOME/miniconda/bin/activate
  #         conda init
  #     - name: Get EST, festival and festvox
  #       if: steps.cache-downloaded.outputs.cache-hit != 'true'
  #       run: |
  #         cd
  #         curl -L http://festvox.org/packed/festival/2.5/festival-2.5.0-release.tar.gz | \
  #         tar xz --no-same-owner --no-same-permissions && \
  #         curl -L http://festvox.org/packed/festival/2.5/speech_tools-2.5.0-release.tar.gz | \
  #         tar xz --no-same-owner --no-same-permissions && \
  #         curl -L http://festvox.org/packed/festival/2.5/festlex_CMU.tar.gz | \
  #         tar xz --no-same-owner --no-same-permissions && \
  #         curl -L http://festvox.org/packed/festival/2.5/festlex_OALD.tar.gz | \
  #         tar xz --no-same-owner --no-same-permissions && \
  #         curl -L http://festvox.org/packed/festival/2.5/festlex_POSLEX.tar.gz | \
  #         tar xz --no-same-owner --no-same-permissions && \
  #         curl -L http://festvox.org/packed/festival/2.5/voices/festvox_kallpc16k.tar.gz | \
  #         tar xz --no-same-owner --no-same-permissions && \
  #         curl -L http://festvox.org/packed/festvox/2.8/festvox-2.8.0-release.tar.gz | \
  #         tar xz --no-same-owner --no-same-permissions
  #     - name: Build EST
  #       if: steps.cache-est.outputs.cache-hit != 'true'
  #       run: |
  #         cd ~/speech_tools
  #         ./configure && make && touch ~/.est_build.done
  #     - name: Build Festival
  #       if: steps.cache-festival.outputs.cache-hit != 'true'
  #       run: |
  #         cd ~/festival
  #         ./configure && make && touch ~/.festival_build.done
  #     - name: Build Festvox
  #       if: steps.cache-festvox.outputs.cache-hit != 'true'
  #       run: |
  #         cd ~/festvox
  #         cp $GITHUB_WORKSPACE/ext/ehmm_patch/do_ehmm ./src/ehmm/scripts/
  #         ./configure && make && touch ~/.festvox_build.done
  #     - name: Get g2p model
  #       run: |
  #         cd
  #         git clone https://github.com/grammatek/g2p-lstm.git
  #         source $HOME/miniconda/bin/activate
  #         conda init
  #         conda env create -f g2p-lstm/environment.yml
  # This job builds the voices
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted
    # needs: prereq
    env:
      ESTDIR: ~/speech_tools
      FESTVOXDIR: ~/festvox
      LC_ALL: C.UTF-8
      G2P_MODEL_DIR: ~/g2p-lstm
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache voice corpora
        id: cache-corpora
        uses: actions/cache@v2
        with:
          path: |
            ~/wav_alfur
            ~/index_alfur.tsv
            ~/wav_dilja
            ~/index_dilja.tsv
          key: ${{ runner.os }}-corpora
      - name: Reconstruct corpora structure if cache is present
        if: steps.cache-corpora.outputs.cache-hit == 'true'
        run: |
          mkdir -p ~/data/alfur && mkdir -p ~/data/dilja
          cp ~/wav_alfur ~/data/alfur/audio
          cp ~/index_alfur.tsv ~/data/alfur/index.tsv
          cp ~/wav_dilja ~/data/dilja/audio
          cp ~/index_dilja.tsv ~/data/dilja/index.tsv
      - name: Download voice corpora if not present in cache
        if: steps.cache-corpora.outputs.cache-hit != 'true'
        run: |
          [ ! -d data/alfur ] && wget -nv -O alfur.zip https://repository.clarin.is/repository/xmlui/bitstream/handle/20.500.12537/104/alfur.zip
          [ ! -d data/dilja ] && wget -nv -O dilja.zip https://repository.clarin.is/repository/xmlui/bitstream/handle/20.500.12537/104/dilja.zip
          [ ! -d data ] && mkdir data
          [ ! -d data/alfur ] && unzip -q alfur.zip -d data/alfur
          [ ! -d data/dilja ] && unzip -q dilja.zip -d data/dilja
          [ ! -f alfur.zip ] && rm -f alfur.zip
          [ ! -f dilja.zip ] && rm -f dilja.zip
      # Runs a set of commands using the runners shell
      - name: Link data directories and set up voice dirs
        run: |
          cd $GITHUB_WORKSPACE
          cp voice voice_alfur
          ln -s ~/data/alfur ext/data_alfur
          cp voice voice_dilja
          ln -s ~/data/dilja ext/data_dilja
      - name: Create small (2000 utterance) voices with each dataset
        id: build_voices
        uses: ./
        # run: |
        #   source $HOME/miniconda/bin/activate
        #   conda activate fairseq-lstm
        #   cd $GITHUB_WORKSPACE
        #   cd voice_alfur
        #   ./run.sh ../ext/data_alfur standard 2000
        #   cp wav ~/wav_alfur
        #   cp ../index.tsv ~/index_alfur.tsv
        #   cd ../voice_dilja
        #   ./run.sh ../ext/data_dilja standard 2000
        #   cp wav ~/wav_dilja
        #   cp ../index.tsv ~/index_dilja.tsv

