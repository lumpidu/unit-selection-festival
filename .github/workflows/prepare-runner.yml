# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job prepares the Docker container
  setup:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: 'Build container'
        run: |
          cd $GITHUB_WORKSPACE
          docker build . --tag lvl-us-is-train -f train.Dockerfile
      - name: 'Spin up the container'
        run: |
          cd $GITHUB_WORKSPACE
          docker run -d \
            --name voice_builder \
            -v speech-corpora:/usr/local/src/ext/data \
            -v g2p-lstm:/app/fairseq_g2p \
            -v voice-alfur:/usr/local/src/voice_alfur \
            -v voice-dilja:/usr/local/src/voice_dilja \
            -v tts-samples:/outputs \
            -v $GITHUB_WORKSPACE/voice:/usr/local/src/voice \
            -v flite:/flite \
            lvl-us-is-train:latest \
            bash -c "tail -f /dev/null"
  dependencies:
    runs-on: self-hosted
    needs: setup
    steps:
      - name: Get g2p
        run: |
          docker exec voice_builder bash -c "[ ! -d /app/fairseq_g2p ] && cd /app && git clone https://github.com/grammatek/g2p-lstm.git fairseq_g2p"
      - name: Get SPTK
        run: |
          docker exec voice_builder bash -c "[ ! -d /usr/local/src/SPTK-3.6 ] && ./docker_scripts/install_sptk.sh"
      - name: Get Flite
        run: |
          docker exec voice_builder bash -c "[ ! -d /flite/.git ] && git clone https://github.com/grammatek/Flite.git /flite && cd /flite && ./configure && make"
      - name: Download data
        run: |
          docker exec voice_builder ./docker_scripts/download_data.sh /usr/local/src/ext/data alfur
          docker exec voice_builder ./docker_scripts/download_data.sh /usr/local/src/ext/data dilja
  prepare-voice-dirs:
    runs-on: self-hosted
    needs: dependencies
    steps:
      - name: Set up voice dirs
        run: |
          docker exec voice_builder ./docker_scripts/setup_voices.sh /usr/local/src/voice_alfur
          docker exec voice_builder ./docker_scripts/setup_voices.sh /usr/local/src/voice_dilja
  # This job builds the voices
  build-alfur:
    # The type of runner that the job will run on
    runs-on: self-hosted
    needs: prepare-voice-dirs
    timeout-minutes: 1200
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: 'Train Alfur'
        run: |
          docker exec voice_builder ./docker_scripts/prepare_for_build.sh /usr/local/src/voice_alfur /usr/local/src/ext/data/alfur standard 2000
          docker exec voice_builder ./docker_scripts/build_cg_and_clunits_voice.sh /usr/local/src/voice_alfur
          docker exec voice_builder ./docker_scripts/build_grapheme_voice.sh /usr/local/src/voice_alfur
  convert-grapheme-alfur:
    runs-on: self-hosted
    needs: build-alfur
    timeout-minutes: 1200
    steps:
      - name: 'Convert Alfur to .flitevox'
        run: |
          docker exec voice_builder ./docker_scripts/convert_grapheme_to_flite.sh /usr/local/src/voice_alfur
  finish-clunits-alfur:
    runs-on: self-hosted
    needs: build-alfur
    timeout-minutes: 1200
    steps:
      - name: 'Finish the clunits build process'
        run: docker exec voice_builder ./docker_scripts/finish_clunits_voice.sh /usr/local/src/voice_alfur
  finish-clustergen-alfur:
    runs-on: self-hosted
    needs: build-alfur
    timeout-minutes: 1200
    steps:
      - name: 'Finish the clustergen build process'
        run: docker exec voice_builder ./docker_scripts/finish_clustergen_voice.sh /usr/local/src/voice_alfur
  make-test-utterances-alfur:
    runs-on: self-hosted
    needs: [finish-clunits-alfur, finish-clustergen-alfur]
    steps:
      - name: 'Generate test utterances for Alfur'
        run: |
          docker exec voice_builder ./docker_scripts/generate_utts.sh /usr/local/src/voice_alfur
  convert-clunits-to-flite-alfur:
    runs-on: self-hosted
    needs: finish-clunits-alfur
    steps:
      - name: 'Run the flite conversion process for the clunits voice'
        run: |
          docker exec voice_builder ./docker_scripts/convert_clunits_to_flite.sh /usr/local/src/voice_alfur
  build-dilja:
    runs-on: self-hosted
    needs: prepare-voice-dirs
    timeout-minutes: 1200
    steps:
      - name: 'Train Dilja'
        run: |
          docker exec voice_builder ./docker_scripts/prepare_for_build.sh /usr/local/src/voice_dilja /usr/local/src/ext/data/dilja standard 2000
          docker exec voice_builder ./docker_scripts/build_cg_and_clunits_voice.sh /usr/local/src/voice_dilja
          docker exec voice_builder ./docker_scripts/build_grapheme_voice.sh /usr/local/src/voice_dilja
  convert-grapheme-dilja:
    runs-on: self-hosted
    needs: build-dilja
    timeout-minutes: 1200
    steps:
      - name: 'Convert Dilja to .flitevox'
        run: |
          docker exec voice_builder ./docker_scripts/convert_grapheme_to_flite.sh /usr/local/src/voice_dilja
  finish-clunits-dilja:
    runs-on: self-hosted
    needs: build-dilja
    timeout-minutes: 1200
    steps:
      - name: 'Finish the clunits build process'
        run: docker exec voice_builder ./docker_scripts/finish_clunits_voice.sh /usr/local/src/voice_dilja
  finish-clustergen-dilja:
    runs-on: self-hosted
    needs: build-dilja
    timeout-minutes: 1200
    steps:
      - name: 'Finish the clustergen build process'
        run: docker exec voice_builder ./docker_scripts/finish_clustergen_voice.sh /usr/local/src/voice_dilja
  make-test-utterances-dilja:
    runs-on: self-hosted
    needs: [finish-clunits-dilja, finish-clustergen-dilja]
    steps:
      - name: 'Generate test utterances for Dilja'
        run: |
          docker exec voice_builder ./docker_scripts/generate_utts.sh /usr/local/src/voice_dilja
  convert-clunits-to-flite-dilja:
    runs-on: self-hosted
    needs: finish-clunits-dilja
    steps:
      - name: 'Run the flite conversion process for the clunits voice'
        run: |
          docker exec voice_builder ./docker_scripts/convert_clunits_to_flite.sh /usr/local/src/voice_dilja
  cleanup:
    runs-on: self-hosted
    needs: [make-test-utterances-alfur, make-test-utterances-dilja]
    if: always()
    steps:
      - name: 'Remove the container once work is complete'
        run: docker rm -f voice_builder